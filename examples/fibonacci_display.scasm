.script_name fibonacci_display

.static
fib0:           .int 0
fib1:           .int 1
curr_fib_index: .int 0
curr_fib_value: .int 0
last_fib_time:  .int 0

.include
WAIT:                                       .native 0x4EDE34FBADD967A6 ; void WAIT(int ms)
BEGIN_TEXT_COMMAND_DISPLAY_TEXT:            .native 0x25FBB336DF1804CB ; void BEGIN_TEXT_COMMAND_DISPLAY_TEXT(const char* text)
END_TEXT_COMMAND_DISPLAY_TEXT:              .native 0xCD015E5BB0D96A57 ; void END_TEXT_COMMAND_DISPLAY_TEXT(float x, float y, int p2)
ADD_TEXT_COMPONENT_INTEGER:                 .native 0x03B504CF259931BC ; void ADD_TEXT_COMPONENT_INTEGER(int value)
GET_GAME_TIMER:                             .native 0x9CD27B0045628463 ; int GET_GAME_TIMER()
ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME:   .native 0x6C188BE134E074AA ; void ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(const char* text)

.string
strNumber:      .str "NUMBER"
strString:      .str "STRING"
strFibonacci:   .str "Fibonacci"

.code
main:
        ENTER 0, 2

        NATIVE 0, 1, GET_GAME_TIMER
        STATIC_U8_STORE last_fib_time   ; last_fib_time = GET_GAME_TIMER()

main_loop: ; infinite loop
        PUSH_CONST_U8 0
        NATIVE 1, 0, WAIT        ; WAIT(0)
        
        ; draw a string
        PUSH_CONST_U8 strString
        STRING
        NATIVE 1, 0, BEGIN_TEXT_COMMAND_DISPLAY_TEXT            ; BEGIN_TEXT_COMMAND_DISPLAY_TEXT("STRING")

        PUSH_CONST_U8 strFibonacci
        STRING
        NATIVE 1, 0, ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME   ; ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Fibonacci")

        PUSH_CONST_F 0.5
        PUSH_CONST_F 0.175
        PUSH_CONST_0
        NATIVE 3, 0, END_TEXT_COMMAND_DISPLAY_TEXT  ; END_TEXT_COMMAND_DISPLAY_TEXT(0.5, 0.175, 0)

        ; draw the fibonacci number
        PUSH_CONST_U8 strNumber
        STRING
        NATIVE 1, 0, BEGIN_TEXT_COMMAND_DISPLAY_TEXT    ; BEGIN_TEXT_COMMAND_DISPLAY_TEXT("NUMBER")

        STATIC_U8_LOAD curr_fib_value
        NATIVE 1, 0, ADD_TEXT_COMPONENT_INTEGER ; ADD_TEXT_COMPONENT_INTEGER(curr_fib_value)

        PUSH_CONST_F 0.5
        PUSH_CONST_F 0.25
        PUSH_CONST_0
        NATIVE 3, 0, END_TEXT_COMMAND_DISPLAY_TEXT  ; END_TEXT_COMMAND_DISPLAY_TEXT(0.5, 0.25, 0)

        ; check if we need to update the fibonacci number
        PUSH_CONST_S16 2000
        NATIVE 0, 1, GET_GAME_TIMER        ; GET_GAME_TIMER()
        STATIC_U8_LOAD last_fib_time
        ISUB
        ILT_JZ main_loop    ; if (GET_GAME_TIMER() - last_fib_time) < 2000)
                            ; then repeat loop
                            ; else nextFibonacci and repeat loop
        CALL nextFibonacci
        STATIC_U8_STORE curr_fib_value  ; every 2 seconds, store the next fibonacci number
        NATIVE 0, 1, GET_GAME_TIMER
        STATIC_U8_STORE last_fib_time   ; last_fib_time = GET_GAME_TIMER()
        
        J main_loop
        LEAVE 0, 0

nextFibonacci:  ; no args, 1 local for return value
.const returnValueLocal 2
        ENTER 0, 3
        PUSH_CONST_1
        STATIC_U8_LOAD curr_fib_index   ; get current fibonacci index
        IGE_JZ nextFibonacci_else       ; if (index < 1)
nextFibonacci_then:
        PUSH_CONST_0
        LOCAL_U8_STORE returnValueLocal ; returnValue = 0
        J nextFibonacci_end
nextFibonacci_else:
        STATIC_U8_LOAD fib0     ; fib0
        STATIC_U8_LOAD fib1     ; fib1
        IADD
        LOCAL_U8_STORE returnValueLocal        ; returnValue = fib0 + fib1
        STATIC_U8_LOAD fib1
        STATIC_U8_STORE fib0    ; fib0 = fib1
        LOCAL_U8_LOAD returnValueLocal
        STATIC_U8_STORE fib1    ; fib1 = newFib
nextFibonacci_end:
        STATIC_U8_LOAD curr_fib_index
        IADD_U8 1
        STATIC_U8_STORE curr_fib_index  ; curr_fib_index++
        LOCAL_U8_LOAD returnValueLocal  ; push the return value to the stack
        LEAVE 0, 1
