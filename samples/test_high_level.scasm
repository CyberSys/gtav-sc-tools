$NAME test_high_level

STRUCT Vec3 BEGIN
    x: AUTO
    y: AUTO
    z: AUTO
END

STRUCT SimplerStruct BEGIN
    b: AUTO
    c: AUTO[2]
END

STRUCT SixNumbers BEGIN
    values: AUTO[6]
END

STRUCT ComplexStruct BEGIN 
    v: AUTO
    a: AUTO[5]
    simpler1: SimplerStruct
    simpler2: SimplerStruct
    z: SixNumbers[5]
END

STATICS BEGIN 
    someValue: AUTO
    someVector: Vec3
    someComplex: ComplexStruct
    someArray: AUTO[4]
    someVectorArray: Vec3[8]
END

FUNC main
    someLocalVector: Vec3
    someLocalValue: AUTO
    i: AUTO
BEGIN
        PUSH_CONST 5.0 10.0 15.0
        PUSH_CONST SIZEOF(someVector)
        STATIC someVector
        STORE_N

        PUSH_CONST 1.5
        STATIC someVector
        IOFFSET_U8_STORE OFFSETOF(someVector.y)

        PUSH_CONST 1.0
        STATIC_STORE someValue

        STATIC someVector
        IOFFSET_U8 OFFSETOF(someVector.y)
        CALL addFivePointFive

        STATIC someValue
        CALL addFivePointFive

        PUSH_CONST 1.11 2.22 3.33
        PUSH_CONST SIZEOF(someLocalVector)
        LOCAL someLocalVector
        STORE_N

        PUSH_CONST 42.42
        LOCAL_STORE someLocalValue

        LOCAL someLocalValue
        CALL addFivePointFive

        PUSH_CONST 0        ; index
        STATIC someArray    ; array
        ARRAY_U8 ITEMSIZEOF(someArray)

        PUSH_CONST 0
        LOCAL_STORE i ; i = 0
    initSomeArrayLoop:
        LOCAL_LOAD i
        PUSH_CONST LENGTHOF(someArray)
        ILT_JZ exitInitSomeArrayLoop   ; i < someArray.length

        LOCAL_LOAD i
        IADD_U8 1
        IMUL_U8 5       ; value = (i + 1) * 5
        LOCAL_LOAD i    ; index
        STATIC someArray
        ARRAY_U8_STORE ITEMSIZEOF(someArray)    ; someArray[index] = value

        LOCAL_LOAD i
        IADD_U8 1
        LOCAL_STORE i ; i++
        J initSomeArrayLoop
    exitInitSomeArrayLoop:

    loop: ; infinite loop
        PUSH_CONST 0
        CALL_NATIVE WAIT
        
        ; draw value
        PUSH_CONST 0.5 0.05
        STATIC_LOAD someValue
        CALL drawFloat

        ; draw vector
        PUSH_CONST 0.25 0.2
        STATIC someVector
        IOFFSET_U8_LOAD OFFSETOF(someVector.x)
        CALL drawFloat

        PUSH_CONST 0.5 0.2
        STATIC someVector
        IOFFSET_U8_LOAD OFFSETOF(someVector.y)
        CALL drawFloat
        
        PUSH_CONST 0.75 0.2
        STATIC someVector
        IOFFSET_U8_LOAD OFFSETOF(someVector.z)
        CALL drawFloat

        ; draw local value
        PUSH_CONST 0.5 0.35
        LOCAL_LOAD someLocalValue
        CALL drawFloat
        
        ; draw local vector
        PUSH_CONST 0.25 0.5
        LOCAL someLocalVector
        IOFFSET_U8_LOAD OFFSETOF(someLocalVector.x)
        CALL drawFloat

        PUSH_CONST 0.5 0.5
        LOCAL someLocalVector
        IOFFSET_U8_LOAD OFFSETOF(someLocalVector.y)
        CALL drawFloat
        
        PUSH_CONST 0.75 0.5
        LOCAL someLocalVector
        IOFFSET_U8_LOAD OFFSETOF(someLocalVector.z)
        CALL drawFloat

        PUSH_CONST 0.5 0.7 HASH("Hello, World!")
        CALL drawInt


        PUSH_CONST 0
        LOCAL_STORE i ; i = 0
    drawSomeArrayLoop:
        LOCAL_LOAD i
        PUSH_CONST LENGTHOF(someArray)
        ILT_JZ exitDrawSomeArrayLoop   ; i < someArray.length

        LOCAL_LOAD i
        I2F
        PUSH_CONST 0.1
        FMUL            ; x = i * 0.1
        PUSH_CONST 0.2
        FADD            ; x += 0.2

        PUSH_CONST 0.85 ; y = 0.85

        LOCAL_LOAD i
        STATIC someArray
        ARRAY_U8_LOAD ITEMSIZEOF(someArray)

        CALL drawInt

        LOCAL_LOAD i
        IADD_U8 1
        LOCAL_STORE i ; i++
        J drawSomeArrayLoop
    exitDrawSomeArrayLoop:


        J loop
END

FUNC addFivePointFive(valueRef: AUTO) BEGIN
        LOCAL_LOAD valueRef
        LOAD
        PUSH_CONST 5.5
        FADD                   ; *valueRef + 5.5

        LOCAL_LOAD valueRef
        STORE                  ; *valueRef = *valueRef + 5.5
END

FUNC drawFloat(x: AUTO, y: AUTO, value: AUTO) BEGIN
        PUSH_CONST "NUMBER"
        CALL_NATIVE BEGIN_TEXT_COMMAND_DISPLAY_TEXT

        LOCAL_LOAD value
        PUSH_CONST 2
        CALL_NATIVE ADD_TEXT_COMPONENT_FLOAT        ; (float value, int decimalPlaces)

        LOCAL_LOAD x
        LOCAL_LOAD y
        PUSH_CONST 0
        CALL_NATIVE END_TEXT_COMMAND_DISPLAY_TEXT
END

FUNC drawInt(x: AUTO, y: AUTO, value: AUTO) BEGIN
        PUSH_CONST "NUMBER"
        CALL_NATIVE BEGIN_TEXT_COMMAND_DISPLAY_TEXT

        LOCAL_LOAD value
        CALL_NATIVE ADD_TEXT_COMPONENT_INTEGER

        LOCAL_LOAD x
        LOCAL_LOAD y
        PUSH_CONST 0
        CALL_NATIVE END_TEXT_COMMAND_DISPLAY_TEXT
END
