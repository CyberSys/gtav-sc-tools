$NAME fibonacci
$STATICS 3

$STATIC_INT_INIT 0 0  ; fib0
$STATIC_INT_INIT 1 1  ; fib1
$STATIC_INT_INIT 2 0  ; current fibonnaci index

$NATIVE_DEF 4EDE34FBADD967A6 ; void WAIT(int ms)

main:
        ENTER 0 2
    loop: ; infinite loop
        PUSH_CONST_S16 2000
        NATIVE 1 0 0        ; WAIT(2000)
        CALL @nextFibonacci
        GLOBAL_U16_STORE 2  ; every 2 seconds, store the next fibonacci number in global 2
        J @loop
        LEAVE 0 0

nextFibonacci:  ; no args, 1 local for return value
        ENTER 0 3
        PUSH_CONST_1
        STATIC_U8_LOAD 2    ; get current fibonnaci index
        IGE_JZ @else        ; if (index < 1)
    then:
        PUSH_CONST_0
        LOCAL_U8_STORE 2    ; return 0
        J @end
    else:
        STATIC_U8_LOAD 0    ; fib0
        STATIC_U8_LOAD 1    ; fib1
        IADD
        LOCAL_U8_STORE 2    ; return fib0 + fib1
        STATIC_U8_LOAD 1
        STATIC_U8_STORE 0   ; fib0 = fib1
        LOCAL_U8_LOAD 2
        STATIC_U8_STORE 1   ; fib1 = newFib
    end:
        STATIC_U8_LOAD 2
        IADD_U8 1
        STATIC_U8_STORE 2   ; index++
        LOCAL_U8_LOAD 2     ; push the return value to the stack
        LEAVE 0 1