$NAME fibonacci_display
$STATICS 5

$STATIC_INT_INIT 0 0  ; fib0
$STATIC_INT_INIT 1 1  ; fib1
$STATIC_INT_INIT 2 0  ; current fibonnaci index
$STATIC_INT_INIT 3 0  ; current fibonnaci value
$STATIC_INT_INIT 4 0  ; last fibonnaci time

main:
        ENTER 0 2

        CALL_NATIVE GET_GAME_TIMER
        STATIC_U8_STORE 4   ; lastTime = GET_GAME_TIMER()

    .loop: ; infinite loop
        PUSH 0
        CALL_NATIVE WAIT        ; WAIT(0)
        
        ; draw a string
        PUSH "STRING"
        CALL_NATIVE BEGIN_TEXT_COMMAND_DISPLAY_TEXT        ; BEGIN_TEXT_COMMAND_DISPLAY_TEXT("STRING")

        PUSH "Fibonacci"
        CALL_NATIVE ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME        ; ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Fibonacci")

        PUSH 0.5
        PUSH 0.175
        PUSH 0
        CALL_NATIVE END_TEXT_COMMAND_DISPLAY_TEXT        ; END_TEXT_COMMAND_DISPLAY_TEXT(0.5, 0.175, 0)

        ; draw the fibonacci number
        PUSH "NUMBER"
        CALL_NATIVE BEGIN_TEXT_COMMAND_DISPLAY_TEXT        ; BEGIN_TEXT_COMMAND_DISPLAY_TEXT("NUMBER")

        STATIC_U8_LOAD 3    ; current fibonacci number
        CALL_NATIVE ADD_TEXT_COMPONENT_INTEGER        ; ADD_TEXT_COMPONENT_INTEGER(currentFibonacci)

        PUSH 0.5
        PUSH 0.25
        PUSH 0
        CALL_NATIVE END_TEXT_COMMAND_DISPLAY_TEXT        ; END_TEXT_COMMAND_DISPLAY_TEXT(0.5, 0.25, 0)

        ; check if we need to update the fibonacci number
        PUSH 2000
        CALL_NATIVE GET_GAME_TIMER        ; GET_GAME_TIMER()
        STATIC_U8_LOAD 4    ; lastTime
        ISUB
        ILT_JZ .loop     ; if (GET_GAME_TIMER() - lastTime) < 2000)
                         ; then repeat loop
                         ; else nextFibonacci and repeat loop
        CALL nextFibonacci
        STATIC_U8_STORE 3  ; every 2 seconds, store the next fibonacci number in static 3
        CALL_NATIVE GET_GAME_TIMER
        STATIC_U8_STORE 4   ; static4 = GET_GAME_TIMER()
        
        J .loop
        LEAVE 0 0

nextFibonacci:  ; no args, 1 local for return value
        ENTER 0 3
        PUSH 1
        STATIC_U8_LOAD 2    ; get current fibonacci index
        IGE_JZ .else        ; if (index < 1)
    .then:
        PUSH 0
        LOCAL_U8_STORE 2    ; return 0
        J .end
    .else:
        STATIC_U8_LOAD 0    ; fib0
        STATIC_U8_LOAD 1    ; fib1
        IADD
        LOCAL_U8_STORE 2    ; return fib0 + fib1
        STATIC_U8_LOAD 1
        STATIC_U8_STORE 0   ; fib0 = fib1
        LOCAL_U8_LOAD 2
        STATIC_U8_STORE 1   ; fib1 = newFib
    .end:
        STATIC_U8_LOAD 2
        IADD_U8 1
        STATIC_U8_STORE 2   ; index++
        LOCAL_U8_LOAD 2     ; push the return value to the stack
        LEAVE 0 1